
include ../../_util-fns

.grid-fluid.api-content
  .c2
    h2 What It Does
  .c10
    :marked
      Short Description
    

  .c2
    h2 How To Use
  .c10
    p
      Some info on how to use this


  .c2
    h2 Selectors <i class="material-icons md-14">help</i>
  .c10
    p
      
      code [ngSwitch]




  .c2
    h2 Inputs <i class="material-icons md-14">help</i>
  .c10
    p
      a(href="#")
        code ngSwitch
      | &nbsp;bound to&nbsp;
      a(href="#")
        code NgSwitch.ngSwitch






  .c2
    h2 Class Overview
  .c10
    pre.prettify
      code.
        class NgSwitch {
          ...
        }
  .c2
    h2 Class Description
  .c10
    :marked
      Adds or removes DOM sub-trees when their match expressions match the switch expression.
      
      Elements within `NgSwitch` but without `NgSwitchWhen` or `NgSwitchDefault` directives will be
      preserved at the location as specified in the template.
      
      `NgSwitch` simply inserts nested elements based on which match expression matches the value
      obtained from the evaluated switch expression. In other words, you define a container element
      (where you place the directive with a switch expression on the
      **`[ngSwitch]="..."` attribute**), define any inner elements inside of the directive and
      place a `[ngSwitchWhen]` attribute per element.
      
      The `ngSwitchWhen` property is used to inform `NgSwitch` which element to display when the
      expression is evaluated. If a matching expression is not found via a `ngSwitchWhen` property
      then an element with the `ngSwitchDefault` attribute is displayed.
      
      ### Example ([live demo](http://plnkr.co/edit/DQMTII95CbuqWrl3lYAs?p=preview))
      

      <code-example format="linenums" language="typescript">
      @Component({selector: &#039;app&#039;})
      @View({
        template: `
          &lt;p&gt;Value = {{value}}&lt;/p&gt;
          &lt;button (click)=&quot;inc()&quot;&gt;Increment&lt;/button&gt;
      
          &lt;div [ngSwitch]=&quot;value&quot;&gt;
            &lt;p *ngSwitchWhen=&quot;&#039;init&#039;&quot;&gt;increment to start&lt;/p&gt;
            &lt;p *ngSwitchWhen=&quot;0&quot;&gt;0, increment again&lt;/p&gt;
            &lt;p *ngSwitchWhen=&quot;1&quot;&gt;1, increment again&lt;/p&gt;
            &lt;p *ngSwitchWhen=&quot;2&quot;&gt;2, stop incrementing&lt;/p&gt;
            &lt;p *ngSwitchDefault&gt;&amp;gt; 2, STOP!&lt;/p&gt;
          &lt;/div&gt;
      
          &lt;!-- alternate syntax --&gt;
      
          &lt;p [ngSwitch]=&quot;value&quot;&gt;
            &lt;template ngSwitchWhen=&quot;init&quot;&gt;increment to start&lt;/template&gt;
            &lt;template [ngSwitchWhen]=&quot;0&quot;&gt;0, increment again&lt;/template&gt;
            &lt;template [ngSwitchWhen]=&quot;1&quot;&gt;1, increment again&lt;/template&gt;
            &lt;template [ngSwitchWhen]=&quot;2&quot;&gt;2, stop incrementing&lt;/template&gt;
            &lt;template ngSwitchDefault&gt;&amp;gt; 2, STOP!&lt;/template&gt;
          &lt;/p&gt;
        `,
        directives: [NgSwitch, NgSwitchWhen, NgSwitchDefault]
      })
      export class App {
        value = &#039;init&#039;;
      
        inc() {
          this.value = this.value === &#039;init&#039; ? 0 : this.value + 1;
        }
      }
      
      bootstrap(App).catch(err =&gt; console.error(err));
      </code-example>
  .c2
    h2 Class Details
  .c10
    h3 NgSwitch



    hr
    h3#ngSwitch
      code.
        ngSwitch
    :marked
        *Not Yet Documented*
      




